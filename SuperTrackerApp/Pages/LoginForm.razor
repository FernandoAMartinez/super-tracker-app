@page "/login"
@inject IMessageService _message


<Form Loading="loading" Model="@model"
      OnFinish="OnFinish" OnFinishFailed="OnFinishFailed">
    <FormItem Label="Email">
        <Input Type="email" @bind-Value="@context.Email" />
    </FormItem>
    <FormItem Label="Password">
        <InputPassword @bind-Value="@context.Password" />
    </FormItem>
    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Checkbox @bind-Value="context.RememberMe">Remember me</Checkbox>
    </FormItem>
    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Button Type="@ButtonType.Primary" HtmlType="submit">
            Login
        </Button>
    </FormItem>
</Form>

@code
{

    private UserModel model = new();

    private MessageConfig _config;

    private async Task OnFinish(EditContext editContext)
    {
        toggle(true);
        _config = new()
        {
            Content = "Validating credentials...",
            Key = $"updatable-{DateTime.Now.Ticks}"
        };

        await _message.Loading(_config);

        _config.Content = "Authorized";
        _config.Duration = 3;

        await _message.Success(_config);

        toggle(false);
    }

    private async Task OnFinishFailed(EditContext editContext)
    {
        _config = new() { Key = $"updatable-{DateTime.Now.Ticks}" };

        if (string.IsNullOrEmpty(model.Email) || string.IsNullOrEmpty(model.Password))
            _config.Content = "Complete the required fields.";
        else
            _config.Content = "Not Authorized";

        _config.Duration = 3;
        await _message.Error(_config);

        toggle(false);
    }

    bool loading = false;

    void toggle(bool value) => loading = value;
}